#!/usr/bin/env node

/**
 * Module dependencies.
 */
var config = require('../config');
var app = require('../app');
var debug = require('debug')('green-gis-server:server');
var http = require('http');
var mongoose = require('mongoose');
var schema = require('../core/schema');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || config.port || '4000');
app.set('port', port);

/**
 * Connect mongodb.
 */
mongoose.connection.once('open',  (ref) => {
    schema.init();
});
mongoose.connect(config.connection, { useUnifiedTopology: true, useNewUrlParser: true } );
/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * socket io
 */
var io = require('socket.io')(server);
io.on('connection', (socket) => {
    socket.on('stream', async (data) => {
        try {
            const model = schema.model(data.name);
            const features = await model.find().select('-zooms').lean();
            const buffer = data.buffer || 1000;
            let temps = [];
            socket.emit('begin streaming', {count: features.length});
            features.forEach( (feature, index) => {
                if ( (index + 1) % buffer == 0 ) {
                    socket.emit('streaming', temps);
                    temps = [];
                } else {
                    temps.push(feature);
                }
            });
            socket.emit('streaming', temps);
            socket.emit('end streaming', {});
        } catch (err) {
            socket.emit('error', { message: err.message });
        }
    });

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
